/* ChallengeVII
 * Author: Gregory Mannerberg (gregory.mannerberg@revature.net)
 * Created Date: 7/9/2021
 * Last Modified Date: 7/9/2021
 * Description: A galleon is a sailing ship.
 */

public class Galleon extends Vehicle implements Ship {
    
    integer length;
    integer weight;
    integer currentSpeed;
    List<string> cargo;
    
    public Galleon() {
        this(100, 400);
    }
    
    public Galleon(string name) {
        this();
        setName(name);
    }
    
    public Galleon(integer length, integer weight) {
        this(length, weight, 15);
    }
    
    public Galleon(integer length, integer weight, integer maxSpeed) {
        setLength(length);
        setWeight(weight);
        setMaxSpeed(maxSpeed);
        setMode(Mode.WATER);
        setSpeedUnit('knot');
        currentSpeed = 0;
        setPowerSource('wind');
        cargo = new List<string>();
    }
    
    public Galleon(string name, string manufacturer, date dateCreated) {
        this(name);
        setManufacturer(manufacturer);
        setCreationDate(dateCreated);
    }
    
    // Increases the speed of the ship if not at max speed.
    public override void accelerate() {
        if (currentSpeed < getMaxSpeed()) {
            currentSpeed++;
            system.debug('Hoist the sails!');
        }
        else {
            system.debug('That\'s all she\'s got captain');
        }
    }
    
    // Decreases the speed of the ship if moving.
    public override void decelerate() {
        if (currentSpeed > 0) {
            currentSpeed--;
            system.debug('Slowing down');
        }
        else {
            system.debug('Stopped');
            throw new ShipStoppedException();
        }
    }
    
    public void stopShip() {
        try {
            while (true) {
                decelerate();
            }
        } catch(ShipStoppedException e) {
            system.debug('Exception caught');
        } finally {
            system.debug('Finally block');
        }
    }
    
    // Sets the length of this ship
    public void setLength(integer length) {
        this.length = length;
    }
    
    // Gets the length of this ship
    public integer getLength() {
        return length;
    }
    
    // Sets the weight of this ship
    public void setWeight(integer weight) {
        this.weight = weight;
    }
    
    // Gets the weight of this ship
    public integer getWeight() {
        return weight;
    }
    
    // Adds the given items to this ships cargo
    public void load(List<string> items) {
        for (string item : items) {
            cargo.add(item);
        }
    }
    
    // Unloads all cargo from the ship
    public List<string> unload() {
        List<string> emptyCargo = new List<string>();
        List<string> temp = cargo;
        cargo = emptyCargo;
        return temp;
    }
    
    // Removes barnacles from the ship.
    public void removeBarnacles() {
        system.debug('Removing the barnacles, captain');
    }
    
    // Finds all of the stowaways on the ship.
    public List<string> locateStowaways() {
        List<string> stowaways = new List<string>();
        for (integer i=0; i<10; i++) {
            stowaways.add('Bob' + i);
        }
        return stowaways;
    }

}