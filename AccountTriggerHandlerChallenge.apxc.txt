/* Challenge IX
 * Author: Gregory Mannerberg (gregory.mannerberg@revature.net)
 * Created Date: 7/9/2021
 * Last Modified Date: 7/9/2021
 * Description: Trigger handler for the AccountTrigger.
 */

public class AccountTriggerHandler {
    
    // Prevents the deletion of Accounts with open Oppportunities.
    public static List<Account> preventOpenOpportunityAccountDeletion(List<Account> accounts) {
        for (Account a : [SELECT (SELECT StageName FROM Opportunities) FROM Account WHERE id in :accounts]) {
            List<Opportunity> opps = a.Opportunities;
            integer i = 0;
            boolean err = false;
            while (i<opps.size() && !err) {
                if (opps[i].StageName != 'Closed Won' && opps[i].StageName != 'Closed Lost') {
                    err = true;
                    a.addError('This Account still has an Opportunity that is not Closed Won or Closed Lost');
                }
                i++;
            }
        }
        return accounts;
    }
    
    // Prevents the creation of new Accounts based in California.
    public static List<Account> preventNewCaliforniaAccounts(List<Account> newAccounts) {
        for (Account a : newAccounts) {
            if (a.BillingState == 'CA') {
                a.addError('We are not accepting new Accounts based out of California right now.');
            }
        }
        return newAccounts;
    }
    
    // Creates a placeholder Contact for a new Account that doesn't have a related Contact
    public static List<Account> createContactPlaceholder(List<Account> newAccounts) {
        List<Contact> contacts = new List<Contact>();
        for (Account a : [SELECT Name, (SELECT LastName FROM Contacts) FROM Account WHERE Id in :newAccounts]) {
            if (a.Contacts.isEmpty()) {
                Contact c = new Contact();
                c.LastName = a.Name;
                c.AccountId = a.Id;
                contacts.add(c);
            }
        }
        insert contacts;
        return newAccounts;
    }

}