public class Challenges {
    public void Challenge1(integer total){
        //part1
        List<Account> pokedex = new List<Account>();
        
        for (integer i=0; i<total; i++){
            Account pokemon = new Account();
            pokemon.name = 'pokemon' + i;
            pokedex.add(pokemon);
            system.debug(pokemon.Name);
        }
        insert pokedex;
    }
    public void Challenge2(){
        //part2
        
        List<Account> pokedexToDelete = new List<Account>([SELECT id FROM Account WHERE name LIKE 'pokemon%']);
        delete pokedexToDelete;
    }
    
    public void Challenge3(){
        //part3
        List<Contact> defaultEmails = new List<Contact>();
        for(Contact c: [SELECT email FROM Contact WHERE email = ''] ){
            c.Email = 'default@default.com';
            defaultEmails.add(c);
        }
        update defaultEmails;
        
        List<Contact> defaultPhones = new List<Contact>();
        for(Contact c: [SELECT phone FROM Contact WHERE phone = ''] ){
            c.Phone = '0000000000';
            defaultPhones.add(c);
        }
        update defaultPhones;
        
    }
    
    public void Challenge4(){
        List<Contact> councilOfBobs = new List<Contact>();
        for(integer i = 0; i<200; i++){
            Contact b = new Contact();
            b.FirstName = 'Bob';
            b.LastName = 'Bob';
            councilOfBobs.add(b);
        }
        insert councilOfBobs;
        
        List<Contact> newBobs = new List<Contact>();
        for(Contact c: [SELECT firstName FROM Contact WHERE firstName != 'Bob'] ){
            c.FirstName = 'Bob';
       		newBobs.add(c);
        }
        upsert newBobs;
        
    }
    
    
public void Challenge5a(){
        List<Contact> defaultPhones = new List<Contact>();
        for(Contact c: [SELECT account.phone FROM Contact WHERE Phone = ''] ){
            c.Phone = c.account.phone;
            defaultPhones.add(c);
        }
        update defaultPhones;
    }
    
    public void Challenge5b(){
    	List<Task> defaultEmails = new List<Task>();
        for(Contact c: [SELECT OwnerId FROM Contact WHERE email = '' LIMIT 1] ){
            Task emailTask = new Task();
            emailTask.OwnerId = c.OwnerId;
            defaultEmails.add(emailTask);
        }
        insert defaultEmails;
    }
    
    public void Challenge6(integer numberOfAccounts, integer numberOfContacts){
        List<Account> accountsToAdd = new List<Account>();
        List<Contact> contactsToAdd = new List<Contact>();
        for(integer i = 0; i < numberOfAccounts; i++){
            Account nAccount = new Account();
            nAccount.Name = 'nAccount' + i;
            nAccount.AnnualRevenue = i * 1000;
            nAccount.Phone = '12345678';
            nAccount.Site = 'Site' + i;
            
            accountsToAdd.add(nAccount);
        }
        INSERT accountsToAdd;
        
        for(Account j : accountsToAdd){
            for(integer z = 0; z < numberOfContacts; z++){
				contactsToAdd.add(GenerateContacts(j));
            }
        }
        
        INSERT contactsToAdd;
    }
    
    public Contact GenerateContacts(Account parentAccount){
        Contact nContact = new Contact();
        nContact.LastName = parentAccount.Name + 'c';
        nContact.FirstName = 'John';
        nContact.Phone = '87654321';
        nContact.Email = nContact.FirstName + '@' + parentAccount.Name + '.com';
        nContact.AccountId = parentAccount.Id;
        return nContact;
    }
    
    public void UpdateChildContacts(){
        List<Account> AccList = [SELECT phone, (SELECT id, phone FROM Contacts) FROM Account];
        List<Contact> ConList = new List<Contact>();
        for(Account a : AccList){
            if(a.Contacts != null){
            	List<Contact> curContacts = a.Contacts;
            	for(Contact c: curContacts){
                	c.Phone = a.Phone;
                	conList.add(c);
           		}
            }
        }
        update conList;
    }
    
    public void SystemLog(){
        for(Contact c :[SELECT FirstName, LastName, Account.Name, Account.Phone, Account.Site FROM Contact]){
            system.debug(c.FirstName + ' ' + c.LastName + ', From: ' + c.Account.Name + '. Reachable at: ' + c.Account.Phone + ' and ' + c.Account.Site);
        }
    }
    
    
}
