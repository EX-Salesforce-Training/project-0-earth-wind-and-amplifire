/* 
 * Author: Gregory Mannerberg (gregory.mannerberg@revature.net)
 * Created Date: 7/13/2021
 * Last Modified Date: 7/14/2021
 * Description: Contains all methods related to AccountTrigger.
 */

public class AccountTriggerHandler {

    // When a property owner sells their property that has awnings, the awnings
    // transfer to the new property owner as they are tied to the location. When
    // a new account is created for the new owner, the awnings related to the old
    // account should be linked to the new account.
    public static void linkAwningsToNewAccount(List<Account> newAccounts) {
        system.debug('This is my list of new accounts: ' + newAccounts);
        List<CustomAddress> addresses = new List<CustomAddress>();
        List<string> streets = new List<string>();
        List<string> cities = new List<string>();
        List<string> states = new List<string>();
        List<string> postalCodes = new List<string>();
        List<string> countries = new List<string>();
        Map<CustomAddress, Account> newAccountMap = new Map<CustomAddress, Account>();
        for (Account a : newAccounts) {
            CustomAddress addr = new CustomAddress(a.ShippingStreet, a.ShippingCity, a.ShippingState, a.ShippingPostalCode, a.ShippingCountry);
            addresses.add(addr);
            newAccountMap.put(addr, a);
            streets.add(a.ShippingStreet);
            cities.add(a.ShippingCity);
            states.add(a.ShippingState);
            postalCodes.add(a.ShippingPostalCode);
            countries.add(a.ShippingCountry);
        }
        system.debug('This is my list of new account shipping addresses: ' + addresses);
        system.debug('This is my map of addresses to new accounts: ' + newAccountMap);
        List<Account> oldOwners = [SELECT ShippingAddress, (SELECT Account__c FROM Awnings__r) FROM Account 
                                   WHERE Id NOT IN :newAccounts AND ShippingStreet IN :streets 
                                   AND ShippingCity IN :cities AND ShippingState IN :states 
                                   AND ShippingPostalCode IN :postalCodes AND ShippingCountry IN :countries];
        Map<CustomAddress, List<Awning__c>> oldOwnerMap = new Map<CustomAddress, List<Awning__c>>();
        system.debug('This is my list of old accounts: ' + oldOwners);
        for (Account a : oldOwners) {
            CustomAddress oldAddr = stdToCustom(a.ShippingAddress);
            for (CustomAddress addr : addresses) {
                if (addr.equals(oldAddr)) {
                    oldOwnerMap.put(addr, a.Awnings__r);
                    system.debug(a.Awnings__r);
                }
            }
        }
        system.debug('This is my map of addresses to old accounts: ' + oldOwnerMap);
        List<Awning__c> awningUpdates = new List<Awning__c>();
        if (!oldOwnerMap.isEmpty()) {
            for (CustomAddress addr : addresses) {
                for (Awning__c awn : oldOwnerMap.get(addr)) {
                    system.debug('Updating the info for awning: ' + awn);
                    awn.Account__c = newAccountMap.get(addr).Id;
                    awningUpdates.add(awn);
                }
            }
        }
        system.debug('These are my awnings to be updated: ' + awningUpdates);
        update awningUpdates;    
    }
    
    private static boolean listContainsCustomAddress(List<CustomAddress> addrList, CustomAddress addr) {
        for (CustomAddress a : addrList) {
            if (addr.equals(a)) {
                return true;
            }
        }
        return false;
    }
    
    private static CustomAddress stdToCustom(address addr) {
        CustomAddress customAddr = new CustomAddress(addr.getStreet(), addr.getCity(), addr.getState(), addr.getPostalCode(), addr.getCountry());
        return customAddr;
    }
    
    public class CustomAddress {
        public string street {get; set;}
        public string city {get; set;}
        public string state {get; set;}
        public string postalCode {get; set;}
        public string country {get; set;}
        
        public CustomAddress(string street, string city, string state, string postalCode, string country) {
            this.street = street;
            this.city = city;
            this.state = state;
            this.postalCode = postalCode;
            this.country = country;
        }
        
        public boolean equals(CustomAddress addr) {
            return this.street == addr.street && this.city == addr.city && this.state == addr.state && this.postalCode == addr.postalCode && this.country == addr.Country;
        }
        
    }
}