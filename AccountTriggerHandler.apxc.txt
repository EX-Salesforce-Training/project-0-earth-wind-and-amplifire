/* 
 * Author: Gregory Mannerberg (gregory.mannerberg@revature.net)
 * Created Date: 7/13/2021
 * Last Modified Date: 7/13/2021
 * Description: Contains all methods related to AccountTrigger.
 */

public class AccountTriggerHandler {

    // When a property owner sells their property that has awnings, the awnings
    // transfer to the new property owner as they are tied to the location. When
    // a new account is created for the new owner, the awnings related to the old
    // account should be linked to the new account.
    public static void linkAwningsToNewAccount(List<Account> newAccounts) {
        system.debug('This is my list of new accounts: ' + newAccounts);
        List<CustomAddress> addresses = new List<CustomAddress>();
        Map<CustomAddress, Account> newAccountMap = new Map<CustomAddress, Account>();
        for (Account a : newAccounts) {
            CustomAddress addr = new CustomAddress(a.ShippingStreet, a.ShippingCity, a.ShippingState, a.ShippingPostalCode, a.ShippingCountry);
            addresses.add(addr);
            newAccountMap.put(addr, a);
        }
        system.debug('This is my list of new account shipping addresses: ' + addresses);
        system.debug('This is my map of addresses to new accounts: ' + newAccountMap);
        List<Account> oldOwners = [SELECT ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode, ShippingCountry, (SELECT Account__c FROM Awnings__r) FROM Account WHERE NOT Id IN :newAccounts];
        Map<CustomAddress, List<Awning__c>> oldOwnerMap = new Map<CustomAddress, List<Awning__c>>();
        system.debug('This is my list of old accounts: ' + oldOwners);
        for (Account a : oldOwners) {
            for (CustomAddress addr : addresses) {
                if (a.ShippingStreet == addr.street && a.ShippingCity == addr.city && a.ShippingState == addr.state && a.ShippingPostalCode == addr.postalCode && a.ShippingCountry == addr.country) {
            		oldOwnerMap.put(addr, a.Awnings__r);
                    system.debug(a.Awnings__r);
            	}
            }
        }
        system.debug('This is my map of addresses to old accounts: ' + oldOwnerMap);
        List<Awning__c> awningUpdates = new List<Awning__c>();
        for (CustomAddress addr : addresses) {
            for (Awning__c awn : oldOwnerMap.get(addr)) {
                system.debug('Updating the info for awning: ' + awn);
                awn.Account__c = newAccountMap.get(addr).Id;
                awningUpdates.add(awn);
            }
        }
        system.debug('These are my awnings to be updated: ' + awningUpdates);
        update awningUpdates;
        
        
    }
    
    public class CustomAddress {
        public string street {get; set;}
        public string city {get; set;}
        public string state {get; set;}
        public string postalCode {get; set;}
        public string country {get; set;}
        
        public CustomAddress(string street, string city, string state, string postalCode, string country) {
            this.street = street;
            this.city = city;
            this.state = state;
            this.postalCode = postalCode;
            this.country = country;
        }
    }
}